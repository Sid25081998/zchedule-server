{
  "_from": "moodle-client",
  "_id": "moodle-client@0.5.0",
  "_inBundle": false,
  "_integrity": "sha1-BP0yfxGef7C/T6vJDAYnRqezOSw=",
  "_location": "/moodle-client",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "moodle-client",
    "fetchSpec": "latest",
    "name": "moodle-client",
    "raw": "moodle-client",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/moodle-client/-/moodle-client-0.5.0.tgz",
  "_shasum": "04fd327f119e7fb0bf4fabc90c062746a7b3392c",
  "_spec": "moodle-client",
  "_where": "/home/sid/Projects/Zchedule/Server",
  "author": {
    "email": "david@moodle.com",
    "name": "David Mudr√°k"
  },
  "bugs": {
    "url": "https://github.com/mudrd8mz/node-moodle-client/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bluebird": "^3.0.5",
    "request-promise": "^1.0.2"
  },
  "deprecated": false,
  "description": "Node.js client for Moodle web services API",
  "devDependencies": {
    "mocha": "^2.3.3"
  },
  "homepage": "https://github.com/mudrd8mz/node-moodle-client#readme",
  "keywords": [
    "api",
    "json",
    "moodle",
    "rest",
    "webservice"
  ],
  "license": "BSD-2-Clause",
  "main": "client.js",
  "name": "moodle-client",
  "optionalDependencies": {},
  "readme": "moodle-client\n=============\n\n[![Build Status](https://travis-ci.org/mudrd8mz/node-moodle-client.svg?branch=master)](https://travis-ci.org/mudrd8mz/node-moodle-client)\n\nnode.js client for [moodle](https://moodle.org/) web services API\n\n## Requirements\n\n* moodle web services via REST protocol\n  [enabled](https://docs.moodle.org/en/Using_web_services).\n\n## Installation\n\n    $ npm install moodle-client\n\n## Usage\n\nThe client exposes promises API via [bluebird](http://bluebirdjs.com/)\nimplementation.\n\nCall the `init()` function provided by the module to get a promise of a new\ninstance of the client. The promise fulfills with the instance of the client\nready to use for other requests.\n\n    var moodle_client = require(\"moodle-client\");\n\n    moodle_client.init({\n        wwwroot: \"http://localhost/moodle/\",\n        token: \"d457b5e5b0cc31c05ccf38628e4dfc14\"\n\n    }).then(function(client) {\n        do_something(client);\n\n    }).catch(function(err) {\n        console.log(\"Unable to initialize the client: \" + err);\n    });\n\nInstead of providing the token explicitly, you can let the client authenticate\nvia provided username and password.\n\n    var moodle_client = require(\"moodle-client\");\n\n    moodle_client.init({\n        wwwroot: \"http://localhost/moodle/\",\n        username: \"mysystemusername\",\n        password: \"my$y$tem pa33w0rd\"\n\n    }).then(function(client) {\n        do_something(client);\n\n    }).catch(function(err) {\n        console.log(\"Unable to initialize the client: \" + err);\n    });\n\nUse the client's `call()` method to execute a web service function at the\nremote moodle site. The returned promise fulfills with the data returned by the\nremote function.\n\n    var moodle_client = require(\"moodle-client\");\n\n    moodle_client.init({\n        wwwroot: \"http://localhost/moodle/\",\n        token: \"d457b5e5b0cc31c05ccf38628e4dfc14\"\n\n    }).then(function(client) {\n        do_something(client);\n\n    }).catch(function(err) {\n        console.log(\"Unable to initialize the client: \" + err);\n    });\n\n    function do_something(client) {\n        client.call({\n            wsfunction: \"core_webservice_get_site_info\",\n\n        }).then(function(info) {\n            console.log(\"Hello %s, welcome to %s\", info.fullname, info.sitename);\n        });\n    }\n\nTo debug and/or log the client functionality, install and use the `winston`\nlogger.\n\n    var moodle_client = require(\"moodle-client\");\n    var logger = require(\"winston\");\n\n    logger.level = \"debug\";\n    logger.cli();\n\n    moodle_client.init({\n        logger: logger,\n        wwwroot: \"http://localhost/moodle/\",\n        token: \"d457b5e5b0cc31c05ccf38628e4dfc14\"\n\n    }).then(function(client) {\n        do_something(client);\n\n    }).catch(function(err) {\n        console.log(\"Unable to initialize the client: \" + err);\n    });\n\nTo use a custom web service, provide its shortname when creating a new instance\nof the client. If the `service` is not specified, the client defaults to using\nthe `moodle_mobile_app` service.\n\n    var init = moodle_client.init({\n        wwwroot: \"http://localhost/moodle/\",\n        token: \"d457b5e5b0cc31c05ccf38628e4dfc14\",\n        service: \"our_cohorts_management\"\n    });\n\n    init.then(...);\n\nTo pass arguments to the web service function, provide them via the `args`\nobject. To use POST rather than the default GET request method, set the\n`method` property of the call options.\n\n    init.then(function(client) {\n        client.call({\n            wsfunction: \"core_message_unblock_contacts\",\n            method: \"POST\",\n            args: {\n                userids: [1, 2, 3, 4, 5]\n            }\n\n        }).then(function() {\n            console.log(\"Done\");\n        });\n    });\n\nThe client uses `request-promise` to actually perform the requests. Which in\nturn uses `qs` to stringify the args into the query string. Please refer to the\n[qs module documentation](https://github.com/hapijs/qs#stringifying) for how to\npass complex data structures. For example, when calling the function\n`core_cohort_add_cohort_members` the passed arguments should look something like\n\n    args: {\n        members: [\n            {\n                cohorttype: {\n                    type: \"id\",\n                    value: \"1\"\n                },\n                usertype: {\n                    type: \"id\",\n                    value: \"3\"\n                }\n            },\n            {\n                cohorttype: {\n                    type: \"id\",\n                    value: \"1\"\n                },\n                usertype: {\n                    type: \"id\",\n                    value: \"4\"\n                }\n            }\n        ]\n    }\n\nAdditional settings can be provided via the settings object, such as the\nresponse data formatting. See [moodle dev\ndocs](https://docs.moodle.org/dev/Creating_a_web_service_client#Text_formats)\nfor details.\n\n    var mycall = client.call({\n        wsfunction: \"local_myplugin_my_function\",\n        args: {\n            answer: 42\n        },\n        settings: {\n            raw: false,\n            filter: true\n        }\n    );\n\n    mycall.then(...);\n\nIf you are connecting via HTTPS to a Moodle site with self-signed certificate,\nyou may need to set the `strictSSL` option to false.\n\n    var init = moodle_client.init({\n        wwwroot: \"https://localhost/moodle/\",\n        token: \"d457b5eo5b0cc31c05ccf38628e4dfc14\",\n        strictSSL: false\n    });\n\n    init.then(...);\n\n## Downloading Moodle files\n\nCall the `download()` method of the client to download a file from the Moodle\nfile system. The returned promise fulfills with the buffer object with the file\ncontents.\n\n    client.download({\n        filepath: \"/62/user/private/demo/remote.png\",\n        preview: \"bigthumb\",\n        offline: true\n\n    }).then(function(filebuffer) {\n        fs.writeFile(\"/tmp/local.png\", filebuffer, \"binary\");\n\n    }).catch(function(err) {\n        console.log(\"Error downloading the file: \" + err);\n        return;\n    });\n\n## Uploading files to Moodle\n\nThe client can be used to upload files into the user's draft files area within\nthe Moodle file system. Supported are both files with dynamically generated\ncontents as well as files already stored in the local file system. See\nhttps://github.com/request/request#multipartform-data-multipart-form-uploads\nfor details on how to specify the data in both cases.\n\n    var files = {\n        myfile1: {\n            value: \"This text was uploaded by a client\",\n            options: {\n                filename: \"helloworld.txt\",\n                contentType: \"text/plain\"\n            }\n        },\n        myfile2: fs.createReadStream(\"/tmp/upload.png\"),\n    };\n\nOnce you have such a list of files prepared, call the `upload()` method to\nupload them to the user's draft files area. The returned promise fulfills\nwith an array of objects describing the created files.\n\n    client.upload({\n        files: files\n\n    }).then(function(draftfiles) {\n        console.log(draftfiles);\n        return;\n\n    }).catch(function(err) {\n        console.log(\"Error uploading the file: \" + err);\n        return;\n    });\n\nThe method allows you to hard-code the itemid within the user's draft area to\nupload files to and eventually the target path for uploaded files, too.\n\nTo make use of uploaded files in Moodle, you typically call a webservice\nfunction that accepts the id of draft item containing the uploaded files. For\nexample, to copy files from the temporary draft files area to the persistent\nprivate files area, use the function `core_user_add_user_private_files`:\n\n    client.upload({\n        files: files\n\n    }).then(function(draftfiles) {\n\n        // Copy files from the draft area to the persistent private files area.\n        client.call({\n            wsfunction: \"core_user_add_user_private_files\",\n            args: {\n                draftid: draftfiles[0].itemid\n            }\n\n        }).then(function() {\n            console.log(\"Total of %d files uploaded to your private files area!\", draftfiles.length);\n            return;\n        });\n\n        return;\n\n    }).catch(function(err) {\n        console.log(\"Error uploading the file: \" + err);\n        return;\n    });\n\n## Changes\n\n### 0.5.0\n\n* Added support for downloading files from Moodle. Credit goes to @MayaLekova\n  for the initial implementation of the feature.\n* Added support for uploading files to Moodle.\n* Added basic support for travis-co prechecks.\n\n### 0.4.0\n\n* Massive non backwards compatible changes in the API.\n* Now uses `request-promise` to actually perform the requests.\n* The API changed to return promises (via `bluebird`).\n* The eventual authentication happens if needed during the initialization.\n* The module does not provide `create()` any more, use `init()` returning the promise now.\n\n### 0.3.0\n\n* Fixed usage over HTTPS (#4). Added support for self-signed SSL certificates (#5).\n\n### 0.2.0\n\n* The initialization and API/signatures improved (#1).\n* Added ability to authenticate by explicitly provided token (#3).\n* Added tests.\n\n### 0.1.0\n\n* Initial release. The API should not be considered stable yet (as the [version\n  number](http://semver.org/) suggests).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mudrd8mz/node-moodle-client.git"
  },
  "scripts": {
    "test": "mocha test"
  },
  "version": "0.5.0"
}
